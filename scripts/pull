#!/bin/bash
# SPDX-FileCopyrightText: Copyright (c) 2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

set -e -o pipefail

# shellcheck disable=SC1091
. "$(dirname "$0")/../sub-scripts/all.sh"

if ! "${GIT_BIN}" remote | grep -q ^origin; then
    warn_it "No remote by the name 'origin', nothing to pull from"
    exit
fi

branch=$("${GIT_BIN}" symbolic-ref HEAD --short)
if [ -z "${branch}" ]; then
    fail_it "Something is wrong, the current branch was not detected"
fi

if ! "${GIT_BIN}" rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
    if git rev-parse --verify HEAD > /dev/null 2>&1; then
        title_it "The upstream is not configured for the ${branch} branch, setting it to origin/${branch}"
        bash_it "${GIT_BIN}" fetch
        bash_it "${GIT_BIN}" branch "--set-upstream-to=origin/${branch}" "${branch}"
    fi
fi

if [ -e .git/modules ]; then
    subs=$(grep -c '^\[submodule' .gitmodules)
    title_it "Updating $(plural "${subs}" 'submodule') first..."
    retry_it "Updating submodules" "bash_it ${GIT_BIN} submodule update --remote"
fi

inc=$(${GIT_BIN} status --porcelain | grep -c '^??' || true)
if [ ! "${inc}" == '0' ]; then
    title_it "Staging $(plural "${inc}" 'file')"
    bash_it "${GIT_BIN}" add .
fi

stashed=no
if git rev-parse --verify HEAD > /dev/null 2>&1; then
    if ! git diff --quiet || ! git diff --cached --quiet; then
        trap "title_it 'Applying the changes back' && bash_it \${GIT_BIN} stash apply" EXIT
        df=$(${GIT_BIN} status --porcelain | wc -l | xargs)
        title_it "Stashing $(plural "${df}" 'file')"
        bash_it "${GIT_BIN}" stash
        stashed=yes
    fi
fi

# shellcheck disable=SC2154
if git ls-remote --exit-code origin "refs/heads/${master}" > /dev/null 2>&1; then
    retry_it "Pulling from origin/${branch}" "bash_it ${GIT_BIN} pull origin ${branch}"
fi

if ${GIT_BIN} remote | cut -f1 -d ' ' | grep upstream; then
    if [ "${branch}" != "${master}" ]; then
        title_it "Checking out the origin/${master} branch"
        bash_it "${GIT_BIN}" checkout "${master}"
    fi
    title_it "Pulling from upstream"
    bash_it "${GIT_BIN}" pull upstream "${master}"
    if [ "${branch}" != "${master}" ]; then
        title_it "Checking out the origin/${branch} branch"
        bash_it "${GIT_BIN}" checkout "${branch}"
        title_it "Merging ${master} into ${branch}"
        bash_it "${GIT_BIN}" merge "${master}"
    fi
fi

trap - EXIT
if [ "${stashed}" == 'yes' ]; then
    title_it "Applying the changes back"
    bash_it "${GIT_BIN}" stash apply
fi
